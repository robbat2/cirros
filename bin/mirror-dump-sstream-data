#!/bin/bash
set -f

source "${0%/*}/common-functions.sh"

Usage() {
   cat <<EOF
Usage: ${0##*/} mirror_dir

    write tab delimited data for simple streams 'tab2streams' input.

    Example:

      bzr branch lp:simplestreams simplestreams
      git clone https://git.launchpad.net/cirros cirros

      ./cirros/bin/mirror-dump-sstream-data "\$mirror_d" > mdata.txt
      ./simplestreams/tools/tenv tab2streams mdata.txt cirros-streams.d

      ./simplestreams/tools/tenv env -u GNUPGHOME \
         SS_GPG_BATCH=1 SS_GPG_DEFAULT_KEY=A5DDB840  \
         js2signed cirros-streams.d
EOF
}

datefortag_bzr() {
    local loginfo ts out repo="${CIRROS_BZR:-.}"
    local spec="tag:$1" fmt="${2:-+%Y%m%d}"
    loginfo=$(bzr log "$repo" --log-format=long --revision "$spec") ||
        { error "couldn't bzr log tag:$i"; return 1; }
    ts=$(echo "$loginfo" | sed -n '/^timestamp:/s,.*: ,,p') &&
        [ -n "$ts" ] || {
            error "failed to get timestamp from log for $spec";
            return 1;
        }
    out=$(date --date="$ts" "$fmt") ||
        { error "failed convert of '$ts' to format=$fmt"; return 1; }
    _RET="$out"
}

datefortag() {
    local spec="$1" fmt="${2:-+%Y%m%d}"
    local repo="${CIRROS_GIT:-${CIRROS_BZR:-.}}"
    if [ ! -d "$repo/.git" -a -d "$repo/.bzr" ]; then
        datefortag_bzr "$@"
        return
    fi
    spec=${spec//"~"/_} # git tags cannot contain ~
    ts=$( cd "$repo" &&
        git show --no-patch "--pretty=format:%ct" "$spec") ||
        { error "failed to 'git show $spec' in $repo"; return 1; }
    out=$(date --utc --date="@$ts" "$fmt") ||
        { error "failed to convert seconds '$ts' to format $fmt"; return 1; }
    _RET="$out"
}

[ "$1" = "-h" -o "$1" = "--help" ] && { Usage; exit 0; }
[ "$#" -eq 1 ] || { Usage 1>&2; fail "must give mirror dir"; }

if [ -z "$CIRROS_BZR" ]; then
    CIRROS_BZR=$(t=$(readlink -f "$0") && cd "${t%/*}/.." && pwd)
elif [ -z "$CIRROS_GIT" ]; then
    CIRROS_GIT=$(t=$(readlink -f "$0") && cd "${t%/*}/.." && pwd)
fi

LXD_META=$(t=$(readlink -f "$0") && cd "${t%/*}/../lxd-meta" && pwd)

OIFS="$IFS"
declare -A VERSION2SERIAL
VERSION2SERIAL=(
    [0.3.0]="20111020" [0.3.1]="20130207"
    [0.3.1~pre1]="20120611" [0.3.1~pre3]="20120827"
    [0.3.1~pre4]="20130111" [0.3.2~pre1]="20130513"
    [0.3.2~pre2]="20131218" [0.3.2~pre3]="20140315"
    [0.3.2]="20140317"
)

generate_lxd() {
    local meta_path=""
    local gzpath="$1" xzpath="$2" lxdpath="$3" \
        content_id=$4 product_name=$5 serial=$6 \
        arch="$7" version="$8" pubname="$9" \
        stream="${10}"

    if [ ! -f "$xzpath" ]; then
        zcat "$gzpath" | xz > "$xzpath.tmp" &&
            mv "$xzpath.tmp" "$xzpath" ||
            { error "failed to create $xzpath"; return 1; }
    fi
    if [ ! -f "$lxdpath" ]; then
        tar -C "$LXD_META" -cJf "$lxdpath.tmp" metadata.yaml templates &&
            mv "$lxdpath.tmp" "$lxdpath" ||
            { error "failed to create $lxdpath"; return 1; }
    fi

    local csha=""
    csha=$(cat "$xzpath" "$lxdpath" | sha256sum) && csha="${csha%%  -}" ||
        { error "failed create combined sha for $lxdpath"; return 1; }

    local path="" local req_out="" out=""
    for path in "$xzpath" "$lxdpath"; do
        md5=$(md5sum "${path}") && md5="${md5%%  ${path}}"
        sha256=$(sha256sum "${path}") && sha256="${sha256%%  ${path}}"

        case "$path" in
            "$xzpath")
                ftype="lxd.tar.xz"
                ;;
            "$lxdpath")
                ftype="root.tar.xz"
                ;;
        esac
        for item in "$content_id" "$product_name" "$serial" "$ftype"; do
            req_out="${req_out}${tab}${item}"
        done
        req_out=${req_out#${tab}}

        out=""
        for i in ftype path arch version size sha256 md5 pubname stream; do
            out="${out}${tab}${i}=${!i}"
        done
        out=${out#${tab}}

        if [ "$ftype" = "lxd.tar.xz" ]; then
            out="${out}${tab}combined_rootxz_sha256=$csha"
        fi
        printf "%s\n" "${req_out}${tab}${out}"
    done
}

#content-id product_name version_name img_name [key=value [key=value]]
content_id_base="net.cirros-cloud:%(stream)s:download"

tab="$(printf '\t')"

top_d="${1:-.}"
cd "$top_d"
IFS=$'\n'; files=( $(find . -type f -printf "%p|%s\n") ); IFS="$OIFS"

for ent in "${files[@]}"; do
    IFS="|"; set -- $ent; IFS="$OIFS"
    path=${1#./}
    size=${2}

    case "$path" in
        *-uec.tar.gz|*-disk.img|*-rootfs.img|*-lxc.tar.gz) :;;
        *) continue;;
    esac
    IFS="/"; set -- $path; IFS=$OIFS
    version="$1"; fname="$2";
    serial="${VERSION2SERIAL[$version]}"
    if [ -z "$serial" ]; then
        datefortag "$version" ||
            fail "serial not found for $version!"
        serial="$_RET"
        VERSION2SERIAL[$version]="$serial"
    fi

    # tokenize cirros-0.3.1~pre4-x86_64-lxc.tar.gz, baseproduct gets 'cirros'
    IFS="-"; set -- $fname; IFS="$OIFS"
    baseproduct="$1"; _version="$2"; arch="$3"; ftype="$4"

    # tokenize 0.3.1~pre1 or 0.3.0
    extra=${version#*~}; [ "$extra" = "$version" ] && extra=""
    tmp=${version%$extra}
    IFS="."; set -- ${version%$extra}; IFS="$IOFS"
    vmaj="$1"; vmin="$2"; vmic="$3"

    [ -z "$extra" ] && stream="released" || stream="devel"

    # productname is "net.cirros-cloud[.devel]:standard:0.3:arch"
    rdns="net.cirros-cloud"
    [ "$stream" = "released" ] || rdns="${rdns}.${stream}"
    product_name="$rdns:standard:$vmaj.$vmin:$arch"
    content_id="${content_id_base//%(stream)s/${stream}}"

    md5=$(md5sum "${path}") && md5="${md5%%  ${path}}"
    sha256=$(sha256sum "${path}") && sha256="${sha256%%  ${path}}"
    pubname="${baseproduct}-${version}-${arch}"

    req_out=""
    for item in "$content_id" "$product_name" "$serial" "$ftype"; do
        req_out="${req_out}${tab}${item}"
    done
    req_out=${req_out#${tab}}

    out=""
    for i in ftype path arch version size sha256 md5 pubname stream; do
        out="${out}${tab}${i}=${!i}"
    done
    out=${out#${tab}}
    printf "%s\n" "${req_out}${tab}${out}"

    case "$path" in
        *.tar.gz)
            generate_lxd "$path" "${path%.gz}.xz" \
                "${path%-lxc.tar.gz}-lxd.tar.xz" \
                "$content_id" "$product_name" "$serial" \
                "$arch" "$version" \
                "$pubname" "$stream" || exit 1;;
    esac

    #printf "
    #echo "$content_id
    #echo "version=$version fname=$fname stream=$stream product_name=$product_name"
done

# vi: tabstop=4 expandtab
